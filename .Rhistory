#########################################################################################
#
# Step one of this script is a call to ODK briefcase via the command line, which pulls all
# records and media.
#
# Step two is to output individual records to a temp file, then bind their data with
# any images to make a pdf document.
#
# This work is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported License
# http://creativecommons.org/licenses/by-sa/3.0/"
#########################################################################################
# Requirements
#
#needs latex and pandoc (external installations, use homebrew)
library(knitr)
library(readr)
library(dplyr)
library(anytime)
library(qrencoder)
library(png)
library(grid)
library(here)
#Run script to generate functions
source("OMR_functions.R")
#remotes::install_github('coolbutuseless/ggqr')
#
#########################################################################################
# call to ODK briefcase
# use full path including first subdirectory
# ie. https://projectx.odk.lshtm.ac.uk/projectx/
# any passwords with special characters will need escape characters
# i.e. password doggy!prunes12 needs to be specified as doggy\\!prunes12
# obviously shouldn't hardcode passwords. Better to call from the console using a readline() command but I am lazy
# Also need to specify the targets for input and output. Here TMIH_example
# I also renamed the jar file for ODK briefcase because I hate whitespace
df<-tibble(id=c(
"8234567890",
"4123456789"))
#set colours for qrcodes
group.colors <- c("0"="white","1"="black")
# enter loop for each row of the csv file
for(i in 1:dim(df)[1])
{
#send a file for the current record to tmp
write_csv(df[i,],"tmp.csv")
id.barcode<-qrencode_df(df$id[i])
id.num <- df$id[i]
start.date = "2022-10-08"
#BUILD THE QR CODE
qr<-ggplot(id.barcode,aes(x,y,fill=as.factor(z)))+geom_tile()+
scale_fill_manual(values = group.colors,name = "group")+
theme_void()+ theme(legend.position="none")
#create a grid for weeks
wk.grid<-omr.encoder(str_remove_all(start.date,pattern = "-"),id.length = 10,show.title = F,yaxis=10,xaxis=10)+theme_void()
#create a grid for ID
id.grid<-omr.encoder(id.num,show.title=F,id.length = 10,xaxis=10,yaxis=10)
# Create the main figure
h.adjust.q=-350
question.grid<- omr.question(
n.x = 27,
n.y = 7,
rm.x = c(5,6,9,10,15:16,19:20,23:24),
rec.size = 24,
padding.x = 12,
padding.y = 12,
xlabs= c("All","Some","None","School Closed","No","Yes","No","Light Period","Moderate Period","Heavy Period","No","Yes","No","Yes","Good","Fair","Poor"),
ylabs = format(seq(as.Date(start.date), by = "day", length.out = 7), format="%a, %d %b"),
x.lims = c(-130,1000),
y.lims = c(260,h.adjust.q),
x.angle = 80,
size = 3
)+
annotate(geom = "text",x = 75,y = h.adjust.q,label="How much\nclass did you\nattend today?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 250,y = h.adjust.q,label="Did you\nhave an\nexam\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 430,y = h.adjust.q,label="Are you in\nyour period\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 610,y = h.adjust.q,label="Did you\nhave\nperiod pain\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 755,y = h.adjust.q,label="Did you\nhave to\ntake\npainkillers\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 915,y = h.adjust.q,label="How was\nyour sleep\nlast night?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = -100,y = -130,label=id.num,angle = 0,hjust = 0.5,vjust=1,size=2,lineheight=1)+
#add lines
geom_vline(xintercept = c(-25,180,320,535,680,830,1000), size =0.25)+
geom_hline(yintercept = c(-20,260), size = 0.25)
annotation_custom(ggplotGrob(qr), xmin = -130, xmax = -30, ymin = 20, ymax = 120)
# get the meniscus logo
img<-readPNG("meniscus_logo.png")
g <- rasterGrob(img, interpolate=TRUE)
# get the omr marker
img2<-readPNG(here("OMR", "inputs", "draft_period", "omr_marker.png"))
g2 <- rasterGrob(img2, interpolate=TRUE)
#Build the form
final<-ggplot(tibble(x=0:1000,y=0:1000),aes(x,y)) +
#add the meniscus logo and QR
annotation_custom(g, xmin=0.4, xmax=0.6, ymin=0.9, ymax=1)+
annotation_custom(ggplotGrob(qr), xmin = 0.0, xmax = 0.05, ymin = 0.95, ymax = 1.0)+
#add the question grid
annotation_custom(ggplotGrob(question.grid), xmin = 0.04, xmax = 0.94, ymin = 0.25, ymax = 0.75)+
# add the omr marks
annotation_custom(g2, xmin=0.0, xmax=0.03, ymin=0.6, ymax=1)+
annotation_custom(g2, xmin=0.0, xmax=0.03, ymin=-1.05, ymax=1)+
annotation_custom(g2, xmin=0.97, xmax=1, ymin=0.6, ymax=1)+
annotation_custom(g2, xmin=0.97, xmax=1, ymin=-1.05, ymax=1)+
annotation_custom(ggplotGrob(wk.grid), xmin = 0.45, xmax = 0.2, ymin = -0.5, ymax = 0.75)+
annotation_custom(ggplotGrob(id.grid), xmin = 0.7, xmax = 0.45, ymin = -0.5, ymax = 0.75)+
theme_void()
final
ggsave("tmp.png")
#convert datetimes so that reports sort appropriately by date of submission
#run RMD script to create report in pdf, pulling in any jpgs
rmarkdown::render(input = "pdfmaker2.Rmd",
output_file = str_c(df[i,],".pdf"),
output_dir = "output/")
}
#This work is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported License
#http://creativecommons.org/licenses/by-sa/3.0/"
#Nuff respect to VP Nagraj [twitter @vpnagraj] from whose scripts I reused some of the control structure for calling RMD from another R script
#See http://nagraj.net/notes/multiple-rmarkdown-reports/
library(tidyverse)
########################################################################################################################################
# Function to define a grid based representation of a numeric for OMR forms
# id provides the number of the text
# id.length provides padding to ensure that leading zeroes are not lost - default 5 digits
########################################################################################################################################
omr.encoder<-function(id,id.length=10,show.title=F,xaxis=10,yaxis=10){
# if(nchar(id)>id.length){id.length = nchar(id)}
id=str_pad(id, id.length, pad = "0")
id.grid.data<-tibble(
x = as.numeric(1:nchar(id)),
y = as.numeric(unlist(str_split(id,pattern = "")))
)
id.grid.chart<- ggplot(id.grid.data,aes(x,y))+
geom_tile()+
ylim(-1,yaxis+1)+
xlim(-1,id.length+1)+
theme_void() +
coord_fixed()
if(show.title==T){id.grid.chart = id.grid.chart+ggtitle(id)}
return(id.grid.chart)
}
#examples
#omr.encoder(0134,id.length = 10)
#omr.encoder(0134,id.length = 10,show.title = T)
#omr.encoder("20220913",id.length = 10,show.title = F)
########################################################################################################################################
# Function to define a grid based representation of a question
# Provides an n x n grid based on the number of answer options (columns) and number of question rows (rows)
# box.size sets the checkboxes
########################################################################################################################################
omr.question<-function(
#define number of boxes in columns
n.x,
#define number of boxes in rows
n.y,
#set size of rectangle
rec.size=3,
#set size of padding
padding.x = 1,
padding.y = 1,
#define columns to remove
rm.x=NULL,
rm.y=NULL,
#define some names
xlabs,
ylabs,
#define label angles and sizes
x.angle = 60,
y.angle = 0,
x.lims= c(-30, 100),
y.lims= c(120, -20),
#define size
size = 2
){
#calculate positions of boxes (x)
xpos<- seq(1,((rec.size+padding.x)*n.x),rec.size+padding.x)
#remove any you don't want
if(!is.null(rm.x)){xpos<- xpos[-rm.x]}
#calculate positions of boxes (y)
ypos<- seq(1,((rec.size+padding.y)*n.y),rec.size+padding.y)
#remove any you don't want
if(!is.null(rm.y)){ypos<- ypos[-rm.y]}
# Expand the grid, filtering out the columns we don't want
q.grid<-as_tibble(expand.grid(xpos,ypos))
output<- ggplot(q.grid) + xlim(x.lims) + ylim(y.lims)+
geom_rect(aes(xmin = Var1, xmax = Var1+rec.size, ymin = Var2, ymax = Var2+rec.size),fill = "white", alpha = 1, color = "black", size = 0.25)+
annotate(geom = "text",x = xpos+0.5*rec.size,y = -35,label=xlabs,angle = x.angle,hjust = 0, size = size)+
annotate(geom = "text",y = ypos+0.5*rec.size,x = -35,label=ylabs,angle = y.angle,hjust = 1, size = size)+
theme(plot.margin = margin(2,2,2.5,2.2, "cm"))+
coord_fixed()+
theme_void(base_size = 10)
return(output)
}
#Examples
#omr.question.2(n.x = 15,n.y = 8,rec.size = 2,padding.x = 1,padding.y = 1,xlabs=c(1:15),ylabs = c(1:8))
#omr.question.2(n.x = 3,n.y = 3,rec.size = 2,padding.x = 1,padding.y = 1,xlabs=c("Anyway you like it","B","C"),ylabs = c("Cat","Dog","Fish"))
#omr.question.2(n.x = 3,n.y = 3,rec.size = 4,padding.x = 5,padding.y = 2,xlabs=c("Anyway you like it","B","C"),ylabs = c("Cat","Dog","Fish"))
#omr.question.2(n.x = 15,n.y = 8,rec.size = 2,padding.x = 1,padding.y = 1,rm.x = c(4,6,12),rm.y = c(2,6))
#omr.question.2(n.x = 15,n.y = 8,rec.size = 3,padding.x = 1,padding.y = 1,rm.x = c(4,6,12),rm.y = c(2,6))
###############################################################################################################
# Create a function to get the answers out of the OMR data.
# You have to provide
# df: needs to include the file_id, plus the Question variables (i.e. c(file_id,Q02:Q06))
# q : the column name for the eventual variable
# a : a list of answers
#
# This outputs a tidy list in long format, which allows for multiple boxes to be ticked for each question.
# Beware that this could cause problems if you were only expecting a single box
# It captures NA for empty answers
###############################################################################################################
q.maker = function(df,q,a) {
output<- df %>%
setNames(.,c("file_id",a)) %>%
mutate(question = q) %>%
select(file_id,question,everything()) %>%
pivot_longer(cols = 3:ncol(.),names_to = "answer",values_to = "score") %>%
mutate(
answer  = case_when(score==1 ~ answer)) %>%
distinct() %>%
group_by(file_id,question) %>%
mutate(n.answers=sum(score)) %>%
filter(!(n.answers>0 & is.na(answer))) %>%
select(-score)
return (output)
}
################################################################################################################
# Example
###############################################################################################################
#q.maker(select(df,c(file_id,Q01:Q04)),q = "Happy",a = c("Y","N","DL","ITD"))
###############################################################################################################
###############################################################################################################
# Create a function to get the ID numbers from an n*n matrix
# You have to provide
# df: needs to include the file_id, plus the Question variables (i.e. c(file_id,Q02:Q06))
# q : the column name for the eventual variable
# a : a list of answers
#
# This outputs a tidy list in long format, which allows for multiple boxes to be ticked for each question.
# Beware that this could cause problems if you were only expecting a single box
# It captures NA for empty answers
###############################################################################################################
numericator = function(df,id.name="file_id",lead.digit=0) {
file_id <- df %>% select(id.name)
output<-df %>%
select(-id.name) %>%
mutate_if(is.logical,as.numeric) %>%
mutate_if(is.numeric,as.character) %>%
unite("z",sep = "") %>%
mutate(pos=str_locate(z, "1")[,1],)
if(lead.digit==0){output <- output %>% mutate(pos=pos-1)}
output<-bind_cols(file_id,output)
return (as.numeric(output$pos))
}
################################################################################################################
# Example
###############################################################################################################
#numericator(select(df,c(file_id,Q183:Q192)),id.name = "file_id",lead.digit = 0)
###############################################################################################################
library(tidyverse)
########################################################################################################################################
# Function to define a grid based representation of a numeric for OMR forms
# id provides the number of the text
# id.length provides padding to ensure that leading zeroes are not lost - default 5 digits
########################################################################################################################################
omr.encoder<-function(id,id.length=10,show.title=F,xaxis=10,yaxis=10){
# if(nchar(id)>id.length){id.length = nchar(id)}
id=str_pad(id, id.length, pad = "0")
id.grid.data<-tibble(
x = as.numeric(1:nchar(id)),
y = as.numeric(unlist(str_split(id,pattern = "")))
)
id.grid.chart<- ggplot(id.grid.data,aes(x,y))+
geom_tile()+
ylim(-1,yaxis+1)+
xlim(-1,id.length+1)+
theme_void() +
coord_fixed()
if(show.title==T){id.grid.chart = id.grid.chart+ggtitle(id)}
return(id.grid.chart)
}
#examples
#omr.encoder(0134,id.length = 10)
#omr.encoder(0134,id.length = 10,show.title = T)
#omr.encoder("20220913",id.length = 10,show.title = F)
########################################################################################################################################
# Function to define a grid based representation of a question
# Provides an n x n grid based on the number of answer options (columns) and number of question rows (rows)
# box.size sets the checkboxes
########################################################################################################################################
omr.question<-function(
#define number of boxes in columns
n.x,
#define number of boxes in rows
n.y,
#set size of rectangle
rec.size=3,
#set size of padding
padding.x = 1,
padding.y = 1,
#define columns to remove
rm.x=NULL,
rm.y=NULL,
#define some names
xlabs,
ylabs,
#define label angles and sizes
x.angle = 60,
y.angle = 0,
x.lims= c(-30, 100),
y.lims= c(120, -20),
#define size
size = 2
){
#calculate positions of boxes (x)
xpos<- seq(1,((rec.size+padding.x)*n.x),rec.size+padding.x)
#remove any you don't want
if(!is.null(rm.x)){xpos<- xpos[-rm.x]}
#calculate positions of boxes (y)
ypos<- seq(1,((rec.size+padding.y)*n.y),rec.size+padding.y)
#remove any you don't want
if(!is.null(rm.y)){ypos<- ypos[-rm.y]}
# Expand the grid, filtering out the columns we don't want
q.grid<-as_tibble(expand.grid(xpos,ypos))
output<- ggplot(q.grid) + xlim(x.lims) + ylim(y.lims)+
geom_rect(aes(xmin = Var1, xmax = Var1+rec.size, ymin = Var2, ymax = Var2+rec.size),fill = "white", alpha = 1, color = "black", size = 0.25)+
annotate(geom = "text",x = xpos+0.5*rec.size,y = -35,label=xlabs,angle = x.angle,hjust = 0, size = size)+
annotate(geom = "text",y = ypos+0.5*rec.size,x = -35,label=ylabs,angle = y.angle,hjust = 1, size = size)+
theme(plot.margin = margin(2,2,2.5,2.2, "cm"))+
coord_fixed()+
theme_void()
return(output)
}
#Examples
#omr.question.2(n.x = 15,n.y = 8,rec.size = 2,padding.x = 1,padding.y = 1,xlabs=c(1:15),ylabs = c(1:8))
#omr.question.2(n.x = 3,n.y = 3,rec.size = 2,padding.x = 1,padding.y = 1,xlabs=c("Anyway you like it","B","C"),ylabs = c("Cat","Dog","Fish"))
#omr.question.2(n.x = 3,n.y = 3,rec.size = 4,padding.x = 5,padding.y = 2,xlabs=c("Anyway you like it","B","C"),ylabs = c("Cat","Dog","Fish"))
#omr.question.2(n.x = 15,n.y = 8,rec.size = 2,padding.x = 1,padding.y = 1,rm.x = c(4,6,12),rm.y = c(2,6))
#omr.question.2(n.x = 15,n.y = 8,rec.size = 3,padding.x = 1,padding.y = 1,rm.x = c(4,6,12),rm.y = c(2,6))
###############################################################################################################
# Create a function to get the answers out of the OMR data.
# You have to provide
# df: needs to include the file_id, plus the Question variables (i.e. c(file_id,Q02:Q06))
# q : the column name for the eventual variable
# a : a list of answers
#
# This outputs a tidy list in long format, which allows for multiple boxes to be ticked for each question.
# Beware that this could cause problems if you were only expecting a single box
# It captures NA for empty answers
###############################################################################################################
q.maker = function(df,q,a) {
output<- df %>%
setNames(.,c("file_id",a)) %>%
mutate(question = q) %>%
select(file_id,question,everything()) %>%
pivot_longer(cols = 3:ncol(.),names_to = "answer",values_to = "score") %>%
mutate(
answer  = case_when(score==1 ~ answer)) %>%
distinct() %>%
group_by(file_id,question) %>%
mutate(n.answers=sum(score)) %>%
filter(!(n.answers>0 & is.na(answer))) %>%
select(-score)
return (output)
}
################################################################################################################
# Example
###############################################################################################################
#q.maker(select(df,c(file_id,Q01:Q04)),q = "Happy",a = c("Y","N","DL","ITD"))
###############################################################################################################
###############################################################################################################
# Create a function to get the ID numbers from an n*n matrix
# You have to provide
# df: needs to include the file_id, plus the Question variables (i.e. c(file_id,Q02:Q06))
# q : the column name for the eventual variable
# a : a list of answers
#
# This outputs a tidy list in long format, which allows for multiple boxes to be ticked for each question.
# Beware that this could cause problems if you were only expecting a single box
# It captures NA for empty answers
###############################################################################################################
numericator = function(df,id.name="file_id",lead.digit=0) {
file_id <- df %>% select(id.name)
output<-df %>%
select(-id.name) %>%
mutate_if(is.logical,as.numeric) %>%
mutate_if(is.numeric,as.character) %>%
unite("z",sep = "") %>%
mutate(pos=str_locate(z, "1")[,1],)
if(lead.digit==0){output <- output %>% mutate(pos=pos-1)}
output<-bind_cols(file_id,output)
return (as.numeric(output$pos))
}
################################################################################################################
# Example
###############################################################################################################
#numericator(select(df,c(file_id,Q183:Q192)),id.name = "file_id",lead.digit = 0)
###############################################################################################################
#########################################################################################
# ODK hardcopy in PDF v 1.0
#########################################################################################
#
# Step one of this script is a call to ODK briefcase via the command line, which pulls all
# records and media.
#
# Step two is to output individual records to a temp file, then bind their data with
# any images to make a pdf document.
#
# This work is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported License
# http://creativecommons.org/licenses/by-sa/3.0/"
#########################################################################################
# Requirements
#
#needs latex and pandoc (external installations, use homebrew)
library(knitr)
library(readr)
library(dplyr)
library(anytime)
library(qrencoder)
library(png)
library(grid)
library(here)
#Run script to generate functions
source("OMR_functions.R")
#remotes::install_github('coolbutuseless/ggqr')
#
#########################################################################################
# call to ODK briefcase
# use full path including first subdirectory
# ie. https://projectx.odk.lshtm.ac.uk/projectx/
# any passwords with special characters will need escape characters
# i.e. password doggy!prunes12 needs to be specified as doggy\\!prunes12
# obviously shouldn't hardcode passwords. Better to call from the console using a readline() command but I am lazy
# Also need to specify the targets for input and output. Here TMIH_example
# I also renamed the jar file for ODK briefcase because I hate whitespace
df<-tibble(id=c(
"8234567890",
"4123456789"))
#set colours for qrcodes
group.colors <- c("0"="white","1"="black")
# enter loop for each row of the csv file
for(i in 1:dim(df)[1])
{
#send a file for the current record to tmp
write_csv(df[i,],"tmp.csv")
id.barcode<-qrencode_df(df$id[i])
id.num <- df$id[i]
start.date = "2022-10-08"
#BUILD THE QR CODE
qr<-ggplot(id.barcode,aes(x,y,fill=as.factor(z)))+geom_tile()+
scale_fill_manual(values = group.colors,name = "group")+
theme_void()+ theme(legend.position="none")
#create a grid for weeks
wk.grid<-omr.encoder(str_remove_all(start.date,pattern = "-"),id.length = 10,show.title = F,yaxis=10,xaxis=10)+theme_void()
#create a grid for ID
id.grid<-omr.encoder(id.num,show.title=F,id.length = 10,xaxis=10,yaxis=10)
# Create the main figure
h.adjust.q=-350
question.grid<- omr.question(
n.x = 27,
n.y = 7,
rm.x = c(5,6,9,10,15:16,19:20,23:24),
rec.size = 24,
padding.x = 12,
padding.y = 12,
xlabs= c("All","Some","None","School Closed","No","Yes","No","Light Period","Moderate Period","Heavy Period","No","Yes","No","Yes","Good","Fair","Poor"),
ylabs = format(seq(as.Date(start.date), by = "day", length.out = 7), format="%a, %d %b"),
x.lims = c(-130,1000),
y.lims = c(260,h.adjust.q),
x.angle = 80,
size = 3
)+
annotate(geom = "text",x = 75,y = h.adjust.q,label="How much\nclass did you\nattend today?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 250,y = h.adjust.q,label="Did you\nhave an\nexam\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 430,y = h.adjust.q,label="Are you in\nyour period\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 610,y = h.adjust.q,label="Did you\nhave\nperiod pain\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 755,y = h.adjust.q,label="Did you\nhave to\ntake\npainkillers\ntoday?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = 915,y = h.adjust.q,label="How was\nyour sleep\nlast night?",angle = 0,hjust = 0.5,vjust=1,size=3,lineheight=1)+
annotate(geom = "text",x = -100,y = -130,label=id.num,angle = 0,hjust = 0.5,vjust=1,size=2,lineheight=1)+
#add lines
geom_vline(xintercept = c(-25,180,320,535,680,830,1000), size =0.25)+
geom_hline(yintercept = c(-20,260), size = 0.25)
annotation_custom(ggplotGrob(qr), xmin = -130, xmax = -30, ymin = 20, ymax = 120)
# get the meniscus logo
img<-readPNG("meniscus_logo.png")
g <- rasterGrob(img, interpolate=TRUE)
# get the omr marker
img2<-readPNG(here("OMR", "inputs", "draft_period", "omr_marker.png"))
g2 <- rasterGrob(img2, interpolate=TRUE)
#Build the form
final<-ggplot(tibble(x=0:1000,y=0:1000),aes(x,y)) +
#add the meniscus logo and QR
annotation_custom(g, xmin=0.4, xmax=0.6, ymin=0.9, ymax=1)+
annotation_custom(ggplotGrob(qr), xmin = 0.0, xmax = 0.05, ymin = 0.95, ymax = 1.0)+
#add the question grid
annotation_custom(ggplotGrob(question.grid), xmin = 0.04, xmax = 0.94, ymin = 0.25, ymax = 0.75)+
# add the omr marks
annotation_custom(g2, xmin=0.0, xmax=0.03, ymin=0.6, ymax=1)+
annotation_custom(g2, xmin=0.0, xmax=0.03, ymin=-1.05, ymax=1)+
annotation_custom(g2, xmin=0.97, xmax=1, ymin=0.6, ymax=1)+
annotation_custom(g2, xmin=0.97, xmax=1, ymin=-1.05, ymax=1)+
annotation_custom(ggplotGrob(wk.grid), xmin = 0.45, xmax = 0.2, ymin = -0.5, ymax = 0.75)+
annotation_custom(ggplotGrob(id.grid), xmin = 0.7, xmax = 0.45, ymin = -0.5, ymax = 0.75)+
theme_void()
final
ggsave("tmp.png")
#convert datetimes so that reports sort appropriately by date of submission
#run RMD script to create report in pdf, pulling in any jpgs
rmarkdown::render(input = "pdfmaker2.Rmd",
output_file = str_c(df[i,],".pdf"),
output_dir = "output/")
}
#This work is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported License
#http://creativecommons.org/licenses/by-sa/3.0/"
#Nuff respect to VP Nagraj [twitter @vpnagraj] from whose scripts I reused some of the control structure for calling RMD from another R script
#See http://nagraj.net/notes/multiple-rmarkdown-reports/
